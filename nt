#!/usr/bin/env python3

import os
import json
import argparse
from datetime import datetime as dt

from todo_list import TodoList
from todo_item import TodoItem
from constants import Constants

def init():
    if os.path.exists(Constants.list_fname):
      print('.todo.json already exists')
      print('remove it first with `nt rm list`')

    with open(Constants.list_fname, 'w') as f:
      todo_list = TodoList()
      todo_list.to_file()
      print('successfully created {}'.format(Constants.list_fname))

def main():
  parser = argparse.ArgumentParser('nt')

  subparsers = parser.add_subparsers(dest='cmd')
  init_subparser = subparsers.add_parser('init')
  add_subparser = subparsers.add_parser('add', aliases=['a'])
  rm_subparser = subparsers.add_parser('rm', aliases=['r', 'd'])
  ls_subparser = subparsers.add_parser('ls', aliases=['l'])
  complete_subparser = subparsers.add_parser('complete', aliases=['c'])
  uncomplete_subparser = subparsers.add_parser('uncomplete', aliases=['u'])

  add_subparser.add_argument('content', help='content')
  add_subparser.add_argument('-d', '--due', help='due date', type=str)
  add_subparser.add_argument('-p', '--priority', help='priority', type=int)

  rm_subparser.add_argument('id', help='item id', type=str)

  complete_subparser.add_argument('id', help='item id', type=int)
  uncomplete_subparser.add_argument('id', help='item id', type=int)

  args = parser.parse_args()
  print(args)

  if args.cmd is None:
    parser.print_usage()
    exit(0)

  if args.cmd == 'init':
    init()
    exit(0)

  todo_list = TodoList.from_file(Constants.list_fname)

  if args.cmd in ['a', 'add']:
    due = None if args.due is None else dt.strptime(args.due, '%d.%m.%Y %H:%M:%S')
    item = TodoItem(
      todo_list.max_id+1,
      args.content,
      due,
      args.priority)
    todo_list.add_item(item)
    todo_list.to_file()
    exit(0)

  if args.cmd in ['l', 'ls']:
    for item in todo_list.items:
      print(item)

  if args.cmd in ['r', 'd', 'rm']:
    if args.id == 'list':
      print('are you sure you want to delete the whole list? [y/n]', end=' ')
      yesno = input()
      if yesno in ['y', 'Y']:
        os.remove(Constants.list_fname)
        print('successfully removed the list')
    else:
      id_ = int(args.id)
      print('here will be item removal')
    exit(0)

  if args.cmd in ['complete', 'c']:
    items = [i for i in todo_list.items if i.id == args.id]
    if len(items) == 0:
      print('no such item')
      exit(0)
    else:
      item = items[0]
      item.completed = True
      print(item)
      todo_list.to_file()
      exit(0)

  if args.cmd in ['uncomplete', 'u']:
    items = [i for i in todo_list.items if i.id == args.id]
    if len(items) == 0:
      print('no such item')
      exit(0)
    else:
      item = items[0]
      item.completed = False
      print(item)
      todo_list.to_file()
      exit(0)

if __name__ == '__main__':
  main()
