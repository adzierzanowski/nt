#!/usr/bin/env python3

import os
import argparse
from datetime import datetime as dt

from todo_list import TodoList
from todo_item import TodoItem
from constants import Constants

def init():
    if os.path.exists(Constants.list_fname):
      print('.todo.json already exists')
      print('remove it first with `nt rm list`')
      exit(1)

    todo_list = TodoList()
    todo_list.to_file(force=True)
    print('successfully created {}'.format(Constants.list_fname))

def main():
  parser = argparse.ArgumentParser('nt')

  subparsers = parser.add_subparsers(dest='cmd')
  subparsers.add_parser('init')
  add_subparser = subparsers.add_parser('add', aliases=['a'])
  edit_subparser = subparsers.add_parser('edit', aliases=['e'])
  rm_subparser = subparsers.add_parser('rm', aliases=['r', 'd'])
  ls_subparser = subparsers.add_parser('ls', aliases=['l'])
  complete_subparser = subparsers.add_parser('complete', aliases=['c'])
  uncomplete_subparser = subparsers.add_parser('uncomplete', aliases=['u'])

  add_subparser.add_argument('content', help='content', nargs='+')
  add_subparser.add_argument('-d', '--due', help='due date', type=str)
  add_subparser.add_argument('-p', '--priority', help='priority', type=int)

  edit_subparser.add_argument('id', help='id', type=int)
  edit_subparser.add_argument('-c', '--content', help='content', type=str)
  edit_subparser.add_argument('-d', '--due', help='due date', type=str)
  edit_subparser.add_argument('-p', '--priority', help='priority', type=int)

  rm_subparser.add_argument('id', help='item id', type=str)

  complete_subparser.add_argument('id', help='item id', type=int)
  uncomplete_subparser.add_argument('id', help='item id', type=int)

  ls_subparser.add_argument('args', help='arguments', type=str, nargs='*')
  ls_subparser.add_argument(
    '--due', '-d', help='sort by due date', action='store_true')
  ls_subparser.add_argument(
    '--priority', '-p', help='sort by priority', action='store_true')
  ls_subparser.add_argument(
    '--all', '-a', help='show all', action='store_true')
  ls_subparser.add_argument(
    '--completed', '-c', help='show only completed', action='store_true')
  ls_subparser.add_argument(
    '--uncompleted', '-u',
    help='show only uncompleted', action='store_false')

  args = parser.parse_args()

  if args.cmd is None:
    parser.print_usage()
    exit(0)

  if args.cmd == 'init':
    init()
    exit(0)

  todo_list = TodoList.from_file(Constants.list_fname)

  if args.cmd in ['a', 'add']:
    if args.due:
      for fmt in Constants.date_fmts:
        try:
          due = dt.strptime(args.due, fmt)
          break
        except ValueError:
          due = None
    else:
      due = None

    if due:
      now = dt.now()
      if due.year == 1900:
        due = due.replace(year=now.year)

    item = TodoItem(
      todo_list.max_id+1,
      ' '.join(args.content),
      due,
      args.priority)
    todo_list.add_item(item)
    todo_list.to_file()
    exit(0)

  if args.cmd in ['e', 'edit']:
    found = False
    for i, item in enumerate(todo_list.items):
      if item.id == args.id:
        found = True

        if args.content:
          todo_list.items[i].content = args.content
        if args.priority:
          todo_list.items[i].priority = args.priority
        if args.due:
          todo_list.items[i].due_date = dt.strptime(args.due, Constants.date_fmt)
        
        todo_list.to_file()
    
    if found:
      exit(0)
    else:
      print('no such item')
      exit(1)

  if args.cmd in ['l', 'ls']:
    items = todo_list.items

    if args.priority:
      items = sorted(items,
        key=lambda m: 0 if m.priority is None else -m.priority)
    
    if args.due:
      items = sorted(items,
      key=lambda m: dt(1900, 1, 1) if m.due_date is None else m.due_date,
      reverse=True)

    if not args.all:
      if args.completed:
        items = [item for item in items if item.completed]
      elif args.uncompleted:
        items = [item for item in items if not item.completed]

    for arg in args.args:
      items = [item for item in items if arg in item.content]

    for item in items:
      print(item)

  if args.cmd in ['r', 'd', 'rm']:
    if args.id == 'list':
      print('are you sure you want to delete the whole list? [y/n]', end=' ')
      yesno = input()
      if yesno in ['y', 'Y']:
        os.remove(Constants.list_fname)
        print('successfully removed the list')
    else:
      id_ = int(args.id)
      todo_list.items = [item for item in todo_list.items if item.id != id_]
      todo_list.to_file()
      print('item removed')
    exit(0)

  if args.cmd in ['complete', 'c']:
    items = [i for i in todo_list.items if i.id == args.id]
    if items:
      item = items[0]
      item.completed = True
      print(item)
      todo_list.to_file()
      exit(0)
    else:
      print('no such item')
      exit(1)

  if args.cmd in ['uncomplete', 'u']:
    items = [i for i in todo_list.items if i.id == args.id]
    if items:
      item = items[0]
      item.completed = False
      print(item)
      todo_list.to_file()
      exit(0)
    else:
      print('no such item')
      exit(1)

if __name__ == '__main__':
  main()
