#!/usr/bin/env python3

import os
import sys
import shlex
import subprocess

from nt.todo_list import TodoList
from nt.constants import Constants
from nt.meta import __progname__, __version__
from nt.argparser import parse_args

def edit_command(cmd, args=[], content=''):
  with open(Constants.command_tmp_fname, 'w') as f:
    f.write(content)
  
  editor_retcode = subprocess.call(
    [Constants.editor, Constants.command_tmp_fname])
  if editor_retcode:
    print('error: editor returned {}'.format(editor_retcode), file=sys.stderr)
    os.remove(Constants.command_tmp_fname)
    exit(1)

  with open(Constants.command_tmp_fname, 'r') as f:
    fcmd = shlex.split(f.read())
    retcode = subprocess.call([__progname__, cmd] + args + fcmd)
    if retcode:
      print('something went wrong', file=sys.stderr)
      os.remove(Constants.command_tmp_fname)
      exit(1)
    os.remove(Constants.command_tmp_fname)

def parse_rcfile():
  rcfname = os.path.expanduser(Constants.rcfile)
  if os.path.exists(rcfname):
    with open(rcfname, 'r') as f:
      data = f.read()
    
    data = data.splitlines()
    date_fmt_cnt = 0
    for line in data:
      l = line.split('=')

      if l[0] == 'editor':
        Constants.editor = l[1]

      elif l[0] == 'list_fname':
        Constants.list_fname = l[1]
      
      elif l[0] == 'date_fmt':
        date_fmt_cnt += 1
        if date_fmt_cnt == 1:
          Constants.date_fmt = l[1]
        Constants.date_fmts += l[1]

def main():
  args, parser = parse_args()
  parse_rcfile()

  if args.version:
    print('{} version {}'.format(__progname__, __version__))
    exit(0)

  if args.cmd is None:
    subprocess.call([__progname__, 'ls', '-l'])
    exit(0)

  if args.cmd == 'init':
    TodoList.init()
    exit(0)

  todo_list = TodoList.from_file(Constants.list_fname)
  if not todo_list:
    print('{} not found'.format(Constants.list_fname))
    print('init first with `{} init`'.format(__progname__))
    exit(1)
    
  # cmd:add
  if args.cmd in ('a', 'add'):
    if args.content:
      todo_list.add_item(args.due, args.content, args.priority)
    else:
      edit_command('add')
    exit(0)

  # cmd:cfg
  if args.cmd in ('cfg', 'config'):
    if args.add_prefix:
      if any([not args.name, not args.color]):
        print('-n, and -c switches are required when adding a prefix',
          file=sys.stderr)
        exit(1)
      todo_list.config.add_prefix(args.add_prefix, args.name, args.color)
      todo_list.to_file()
      exit(0)

    elif args.remove_prefix:
      todo_list.config.remove_prefix(args.remove_prefix)
      todo_list.to_file()
      exit(0)

    else:
      todo_list.config.dump()

  # cmd:edit
  if args.cmd in ('e', 'edit'):
    if any([args.content, args.due, args.priority]):
      if todo_list.edit_item(args.id, args.content, args.due, args.priority):
        exit(0)
      else:
        print('no such item')
        exit(1)
    else:
      i, item = todo_list.get_item(args.id)
      if item:
        content = '-c \'{}\''.format(item.content)
        if item.priority:
          content += ' -p {}'.format(item.priority)
        if item.due_date:
          content += ' -d \'{}\''.format(item.due_date.strftime(Constants.date_fmt))

        edit_command('edit', args=[str(args.id)], content=content)

      else:
        print('no such item')
        exit(1)
    exit(0)

  # cmd:ls
  if args.cmd in ('l', 'ls'):
    todo_list.list_items(
      priority=args.priority,
      due=args.due,
      all_=args.all,
      completed=args.completed,
      uncompleted=args.uncompleted,
      args=args.args,
      less=args.less,
      by_prefix=args.by_prefix
    )
    exit(0)

  # cmd:rm
  if args.cmd in ('r', 'd', 'rm'):
    if args.id == 'list':
      print('are you sure you want to delete the whole list? [y/n]', end=' ')
      yesno = input()
      if yesno in ['y', 'Y']:
        os.remove(Constants.list_fname)
        print('successfully removed the list')
    else:
      id_ = int(args.id)
      todo_list.items = [item for item in todo_list.items if item.id != id_]
      todo_list.to_file()
      print('item removed')
    exit(0)

  # cmd:complete
  if args.cmd in ('complete', 'c'):
    if todo_list.set_completeness(args.id, True):
      exit(0)
    else:
      print('no such item')
      exit(1)

  # cmd:uncomplete
  if args.cmd in ('uncomplete', 'u'):
    if todo_list.set_completeness(args.id, False):
      exit(0)
    else:
      print('no such item')
      exit(1)

if __name__ == '__main__':
  main()
