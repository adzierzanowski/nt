#!/usr/bin/env python3

import os
import sys
import shlex
import argparse
import subprocess

from nt.todo_list import TodoList
from nt.constants import Constants
from nt.meta import __progname__

def main():
  parser = argparse.ArgumentParser(__progname__)

  subparsers = parser.add_subparsers(dest='cmd')
  subparsers.add_parser('init')
  add_subparser = subparsers.add_parser('add', aliases=['a'])
  edit_subparser = subparsers.add_parser('edit', aliases=['e'])
  rm_subparser = subparsers.add_parser('rm', aliases=['r', 'd'])
  ls_subparser = subparsers.add_parser('ls', aliases=['l'])
  complete_subparser = subparsers.add_parser('complete', aliases=['c'])
  uncomplete_subparser = subparsers.add_parser('uncomplete', aliases=['u'])

  add_subparser.add_argument('content', help='content', nargs='*')
  add_subparser.add_argument('-d', '--due', help='due date', type=str)
  add_subparser.add_argument('-p', '--priority', help='priority', type=int)

  edit_subparser.add_argument('id', help='id', type=int)
  edit_subparser.add_argument('-c', '--content', help='content', type=str)
  edit_subparser.add_argument('-d', '--due', help='due date', type=str)
  edit_subparser.add_argument('-p', '--priority', help='priority', type=int)

  rm_subparser.add_argument('id', help='item id', type=str)

  complete_subparser.add_argument('id', help='item id', type=int)
  uncomplete_subparser.add_argument('id', help='item id', type=int)

  ls_subparser.add_argument('args', help='arguments', type=str, nargs='*')
  ls_subparser.add_argument(
    '--due', '-d', help='sort by due date', action='store_true')
  ls_subparser.add_argument(
    '--priority', '-p', help='sort by priority', action='store_true')
  ls_subparser.add_argument(
    '--all', '-a', help='show all', action='store_true')
  ls_subparser.add_argument(
    '--completed', '-c', help='show only completed', action='store_true')
  ls_subparser.add_argument(
    '--uncompleted', '-u',
    help='show only uncompleted', action='store_false')

  args = parser.parse_args()

  if args.cmd is None:
    ntls = subprocess.Popen([sys.argv[0], 'ls'], stdout=subprocess.PIPE)
    subprocess.call(['less', '-R'], stdin=ntls.stdout)
    exit(0)

  if args.cmd == 'init':
    TodoList.init()
    exit(0)

  todo_list = TodoList.from_file(Constants.list_fname)
  if not todo_list:
    print('{} not found'.format(Constants.list_fname))
    print('init first with `{} init`'.format(__progname__))
    exit(1)

  def edit_command(cmd, args=[], content=''):
    with open(Constants.command_tmp_fname, 'w') as f:
      f.write(content)
    
    editor_retcode = subprocess.call(
      [Constants.editor, Constants.command_tmp_fname])
    if editor_retcode:
      print('error: editor returned {}'.format(editor_retcode), file=sys.stderr)
      os.remove(Constants.command_tmp_fname)
      exit(1)

    with open(Constants.command_tmp_fname, 'r') as f:
      fcmd = shlex.split(f.read())
      retcode = subprocess.call([__progname__, cmd] + args + fcmd)
      if retcode:
        print('something went wrong', file=sys.stderr)
        os.remove(Constants.command_tmp_fname)
        exit(1)
      os.remove(Constants.command_tmp_fname)
    
  if args.cmd in ['a', 'add']:
    if args.content:
      todo_list.add_item(args.due, args.content, args.priority)
    else:
      edit_command('add')
    exit(0)

  if args.cmd in ['e', 'edit']:
    if any([args.content, args.due, args.priority]):
      if todo_list.edit_item(args.id, args.content, args.due, args.priority):
        exit(0)
      else:
        print('no such item')
        exit(1)
    else:
      i, item = todo_list.get_item(args.id)
      if item:
        content = '-c \'{}\''.format(item.content)
        if item.priority:
          content += ' -p {}'.format(item.priority)
        if item.due_date:
          content += ' -d {}'.format(item.due_date.strftime(Constants.date_fmt))

        edit_command('edit', args=[str(args.id)], content=content)

      else:
        print('no such item')
        exit(1)
    exit(0)

  if args.cmd in ['l', 'ls']:
    todo_list.list_items(
      priority=args.priority,
      due=args.due,
      all_=args.all,
      completed=args.completed,
      uncompleted=args.uncompleted,
      args=args.args
    )
    exit(0)

  if args.cmd in ['r', 'd', 'rm']:
    if args.id == 'list':
      print('are you sure you want to delete the whole list? [y/n]', end=' ')
      yesno = input()
      if yesno in ['y', 'Y']:
        os.remove(Constants.list_fname)
        print('successfully removed the list')
    else:
      id_ = int(args.id)
      todo_list.items = [item for item in todo_list.items if item.id != id_]
      todo_list.to_file()
      print('item removed')
    exit(0)

  if args.cmd in ['complete', 'c']:
    if todo_list.set_completeness(args.id, True):
      exit(0)
    else:
      print('no such item')
      exit(1)

  if args.cmd in ['uncomplete', 'u']:
    if todo_list.set_completeness(args.id, False):
      exit(0)
    else:
      print('no such item')
      exit(1)

if __name__ == '__main__':
  main()
